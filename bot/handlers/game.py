import re

from aiogram.types import Message, ChatType
from aiogram.dispatcher.filters import ChatTypeFilter
from aiogram import Dispatcher, types
from aiogram.utils.deep_linking import decode_payload, get_start_link

from settings import keywords, coefs
from settings.constants import knb
from bot.utils import func, text, game_process
from bot.utils.cryptopay import get_balance, crypto
import asyncio, config, main, random
from bot import keyboards



#–û–°–¢–û–†–û–ñ–ù–û –í–ù–ò–ó–£ –ì–ê–í–ù–û–ö–û–î ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì
#–≠—Ç–æ –±–ª—è–¥—Å–∫–∏–π –∫—É—Å–æ–∫ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —è –Ω–µ –º–æ–≥—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–º–ø–æ—Ä—Ç
#–Ø –∏—Å–∫—Ä–µ–Ω–Ω–µ –Ω–µ–Ω–∞–≤–∏–∂—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥
#–Ø –Ω–µ–Ω–∞–≤–∏–∂—É –µ–≥–æ –∑–∞ —Ç–æ, —á—Ç–æ –æ–Ω –Ω–µ —Å–¥–µ–ª–∞–ª –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –∫–æ–¥ –∏ —Ç–∞–∫ —É–∂–µ –≥–æ–≤–Ω–æ, –∞ –æ–Ω –µ—â—ë –∏ –∏–º–ø–æ—Ä—Ç –Ω–µ —Å–¥–µ–ª–∞–ª
#–Ø –∂–µ–ª–∞—é –µ–º—É –ø–æ–µ–±–∞—Ç—å—Å—è –≤ –∂–æ–ø—É, –∏ —á—Ç–æ–±—ã —É –Ω–µ–≥–æ –±—ã–ª–∏ –¥–µ—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–∏—Å–∞—Ç—å –∫–æ–¥ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –æ–Ω
#–£–º—Ä–∏ –Ω–∞—Ö—É–π, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥
#–Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ —Ç—ã —É–º—Ä—ë—à—å –≤ —Å—Ç—Ä–∞—à–Ω—ã—Ö –º—É–∫–∞—Ö, –∏ —Ç–µ–±—è –±—É–¥—É—Ç –µ–±–∞—Ç—å –≤ –∂–æ–ø—É –≤ –∞–¥—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ –∫—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –±–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ PEP8
#–ú—É–¥–∞–∑–≤–æ–Ω –µ–±–∞–Ω—ã–π
#–≠—Ç–æ –ø–∏—Å–∞–ª –Ω–µ —è

async def getter(msg_query: Message):
    """–ü–∏–∑–¥–µ—Ü"""
    if msg_query.chat.id == config.CHANNEL_BROKER: #–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤ –∫–∞–Ω–∞–ª–µ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–µ
        if msg_query.entities: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ entities
            amounta = float(msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[1].replace(',', "")) #–ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏
            name = msg_query.text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[0]
            asset = msg_query.text.removeprefix(name).split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[2]#–ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ–ª–∞
            if msg_query.entities[0].user: #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–µ–ª–∞
                user = msg_query.entities[0].user
                username = f"@{user.username}" if user.username else user.full_name
                name = user.full_name #—Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                msg_text = msg_query.text.removeprefix(name) #—É–¥–∞–ª—è–µ–º –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≥—Ä–µ—Ö–∞ –ø–æ–¥–∞–ª—å—à–µ
                user_id = int(user.id)
                asset = msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[2]

                amounta = float(msg_text.split("–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")[1].split()[1].replace(',', ""))
                eth, gram, trx, btc, notcoin, ton, ltc, my, bnb, usdc, rub = coefs.update_prices()
                if asset == 'GRAM':
                    amounta = amounta * gram
                elif asset == 'ETH':
                    amount = amounta * eth
                elif asset == 'TRX':
                    amount = amounta * trx
                elif asset == 'BTC':
                    amount = amounta * btc
                elif asset == 'NOT':
                    amount = amounta * notcoin
                elif asset == 'TON':
                    amount = amounta * ton
                elif asset == 'LTC':
                    amount = amounta * ltc
                elif asset == 'BNB':
                    amount = amounta * bnb
                elif asset == 'MY':
                    amount = amounta * my
                elif asset == 'USDC':
                    amount = amounta * usdc
                else:
                    amount = amounta

                if user_id not in main.db.get_bannned(): #–ø—Ä–æ–≤–µ–∫–∞ —á—Ç–æ–±—ã —á–µ–ª –Ω–µ –±—ã–ª –≤ –±–∞–Ω–µ
                    if amount == 'flkgdj': #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
                        await main.bot.send_message(config.CHANNEL_BROKER,f"‚ùó{username}({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Å—Ç–∞–≤–∫—É {amount} {asset}!\n\n‚ùå–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {coefs.MAX_STAKE} {asset}!\n\n‚ö†Ô∏è–ö–æ–º–∏—Å—Å–∏—è 10% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏!")
                        return await main.bot.send_message(config.CHANNEL_BROKER,
                                                    f"‚ùó{name} —Å–¥–µ–ª–∞–ª(a) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Å—Ç–∞–≤–∫—É {amount} USDT!\n\n‚ùå–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: {coefs.MAX_STAKE} {asset}!\n\n‚ö†Ô∏è–ö–æ–º–∏—Å—Å–∏—è 10% –æ—Ç —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏!\n\n–°—É–º–º–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount-amount*0.1} –±—É–¥–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Ä—É—á–Ω—É—é")
                    if "üí¨ " in msg_query.text: #–ø—Ä–æ–≤–µ—Ä—è–º–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–µ–Ω—Ç–∞
                        coef = 0
                        old_comment = msg_query.text.split("üí¨ ")[1]
                        comment = old_comment.lower()
                        comment = comment.replace('—ë', '–µ') 
                        await asyncio.sleep(3)
                        name = name.replace("üé≤", "").replace("üéØ", "").replace("üèÄ", "").replace("‚öΩ", "").replace("üé≥","").replace("üé∞", "").replace("‚úÇÔ∏è", "").replace("üìÑ", "").replace("<", "").replace(">", "").replace(";", "")
                        boton = types.InlineKeyboardMarkup(text=f'Ô∏è‚ô†Ô∏è–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É', url = config.CHECK_URL)
                        kuiboard = types.InlineKeyboardMarkup()
                        kuiboard.add(boton)
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, comment, name), 'html', reply_markup=kuiboard)
                        gp = game_process.GameProcess(amount, asset, coef, user_id, username)
                        if not main.db.users_exists(user_id):
                            main.db.add_user(user_id)
                            main.db.set_active(user_id, 0)
                        main.db.edit_total(user_id, 1)
                        amount_for_moneyback = amount
                        main.db.edit_moneyback(user_id, amount_for_moneyback*config.MONEYBACK)
                        new_com = comment
                        if func.contains(keywords.DICE, comment):
                            new_com = func.remove_prefixes(keywords.DICE, comment)
                            if new_com.isdigit() and new_com != "456" and new_com != "123" and new_com != "321" and new_com != "654" and new_com != "246" and new_com != "135":
                                    coef += coefs.DICE_NUMBER
                                    n = int(new_com)
                                    if 0 < n < 7:
                                       await gp.dice_procces(message, 'number', n)
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            elif func.equals(keywords.EVEN, new_com):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, new_com):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.MORE, new_com):
                                await gp.dice_procces(message, 'more')
                            elif func.equals(keywords.LESS, new_com):
                                await gp.dice_procces(message, 'less')

                        elif func.equals(keywords.EVEN, new_com):
                            await gp.dice_procces(message, 'even')
                        elif func.equals(keywords.ODD, new_com):
                            await gp.dice_procces(message, 'odd')
                        elif func.equals(keywords.MORE, new_com):
                            await gp.dice_procces(message, 'more')
                        elif func.equals(keywords.LESS, new_com):
                            await gp.dice_procces(message, 'less')
                        elif func.equals(keywords.RED, new_com):
                            await gp.darts_procces(message, 'r')
                        elif func.equals(keywords.WHITE, new_com):
                            await gp.darts_procces(message, 'w')
                        elif func.equals(keywords.CENTER, new_com):
                            await gp.darts_procces(message)
                        elif func.equals(keywords.MISS, new_com):
                            await gp.darts_procces(message, 'miss')
                        elif func.equals(keywords.DUEL1, comment):
                            coef += coefs.DUEL
                            await gp.duel_number_process(message, 1, 'üé≤')
                        elif func.equals(keywords.DUEL2, comment):
                            coef += coefs.DUEL
                            await gp.duel_number_process(message, 2, 'üé≤')
                        elif func.equals(keywords.GOAL, new_com):
                            await gp.basketball_process(message)
                        elif func.equals(keywords.MISS, new_com):
                            await gp.basketball_process(message, 'miss')
                        elif func.equals(keywords.GOAL, new_com):
                            await gp.footaball_process(message)
                        elif func.equals(keywords.MISS, new_com):
                            await gp.footaball_process(message, 'miss')

                        elif func.contains(keywords.DARTS, comment):
                            new_com = func.remove_prefixes(keywords.DARTS, comment)
                            if func.equals(keywords.RED, new_com):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, new_com):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.CENTER, new_com):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.darts_procces(message, 'miss')
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BASKET, comment):
                                new_com = func.remove_prefixes(keywords.BASKET, comment)
                                if func.equals(keywords.GOAL, new_com):
                                    await gp.basketball_process(message)
                                elif func.equals(keywords.MISS, new_com):
                                    await gp.basketball_process(message, 'miss')
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.FOOTBALL, comment):
                            new_com = func.remove_prefixes(keywords.FOOTBALL, comment)
                            if func.equals(keywords.GOAL, new_com):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.MISS, new_com):
                                await gp.footaball_process(message, 'miss')
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif func.contains(keywords.BOWLING, comment):
                            new_com = func.remove_prefixes(keywords.BOWLING, comment)
                            if new_com.isdigit():
                                stake = int(new_com)
                                if -1 < stake < 7:
                                    await gp.bowling_process(message, stake)
                            elif func.equals(keywords.STRIKE, new_com):
                                await gp.bowling_process(message, 0)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        elif "–º–∏–Ω—ã " in comment:
                            if not main.db.user_played_mines(user_id):
                                new_com = comment
                                new_com = new_com.removeprefix("–º–∏–Ω—ã ")
                                if new_com.isdigit():
                                    n = int(int(new_com))
                                    if 25 > n > 2:
                                        c = 0
                                        coef += 1
                                        await message.reply(f"*‚ö°–í—ã–±–µ—Ä–µ—Ç–µ –ª—é–±–æ–π —Å–ª–æ—Ç*\n*–ö–ª–µ—Ç–æ–∫ –æ—Ç–∫—Ä—ã—Ç–æ:* 0\n*–ö–æ—ç—Ñ—Ñ–∏—Ü–µ–Ω—Ç:* 1X\n*–í—ã–∏–≥—Ä—ã—à:* {round(amount * coef, 2)}  {asset}", 'markdown', reply_markup=keyboards.functional.create_mine_keyboards(n, user_id, amount, asset, username))
                                    else:
                                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                                else:
                                    await func.invalid_syntax(message, amount, asset, user_id, username, name)
                            else:
                                if amount < dict(await get_balance())[asset]:
                                    if amount < 1:
                                        check = await crypto.create_check(asset, amount - amount * 0.1)
                                        main.db.add_check(user_id, check.check_id)
                                        msag = await message.reply("<b>‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html', reply_markup=keyboards.functional.create_url_button(await get_start_link(user_id, True), "–í–µ—Ä–Ω—É—Ç—åüí∏"))
                                    else:
                                        await crypto.transfer(user_id, asset, amount - amount * 0.1, text.rnd_id())
                                        msag = await message.reply("<b>‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É</b>\n\n<blockquote><b>–î–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å c –∫–æ–º–∏—Å—Å–∏–µ–π 10%!</b></blockquote>", 'html')
                                else:
                                    msag = await message.reply("*‚ùó–í—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–≥—Ä—É*\n\n<blockquote>–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!</blockquote>", 'markdown')
                                await asyncio.sleep(20)
                                await msag.delete()
                        else:
                            if func.equals(keywords.EVEN, comment):
                                await gp.dice_procces(message, 'even')
                            elif func.equals(keywords.ODD, comment):
                                await gp.dice_procces(message, 'odd')
                            elif func.equals(keywords.RED, comment):
                                await gp.darts_procces(message, 'r')
                            elif func.equals(keywords.WHITE, comment):
                                await gp.darts_procces(message, 'w')
                            elif func.equals(keywords.DARTS, comment) or func.equals(keywords.CENTER, comment):
                                await gp.darts_procces(message)
                            elif func.equals(keywords.BASKET, comment):
                                await gp.basketball_process(message)
                            elif func.equals(keywords.FOOTBALL, comment):
                                await gp.footaball_process(message)
                            elif func.equals(keywords.BOWLING, comment) or func.equals(keywords.STRIKE, comment):
                                await gp.bowling_process(message, 0)
                            elif func.equals(keywords.Plinko, comment):
                                await gp.dice_procces(message, 'pl')
                            elif func.equals(keywords.Zone1, comment):
                                await gp.dice_procces(message, 'zone1')
                            elif func.equals(keywords.Zone2, comment):
                                await gp.dice_procces(message, 'zone2')
                            elif func.equals(keywords.Zone3, comment):
                                await gp.dice_procces(message, 'zone3')
                            elif func.equals(keywords.DUELN, comment):
                                await gp.duel_nproccess(message,'üé≤')
                            elif func.equals('2–º',comment):
                                await gp.procces2(message, '2m')
                            elif func.equals(keywords.SLOTS, comment):
                                msg = await message.reply_dice('üé∞')
                                v = msg.dice.value
                                await asyncio.sleep(6)
                                if v == 64:
                                    await func.winner(message, amount, asset, coefs.SLOTS_777 + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #777
                                elif v == 1 or v==22:
                                    await func.winner(message, amount, asset, coefs.SLOTS_GRAPE + coef, user_id,  username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas") #bar and grape
                                elif v == 43:
                                    await func.winner(message, amount, asset, coefs.SLOTS_LEMON + coef, user_id, username, "–ü–æ–±–µ–¥–∞! –í—ã –≤—ã–±–∏–ª–∏ —Ç—Ä–∏ –≤ —Ä—è–¥!", type="cas")
                                else:
                                    None
                            elif comment in ['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã','–±—É–º–∞–≥–∞']:
                                await gp.knb_procces(message, comment)
                            else:
                                await func.invalid_syntax(message, amount, asset, user_id, username, name)
                    else:
                        #–µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–µ–Ω—Ç–∞
                        message = await main.bot.send_message(config.MAIN_CHANNEL, text.get_stake(amount, asset, '‚ùå', name), 'html')
                        await func.invalid_syntax(message, amount, asset, user_id, username, name)
                        await asyncio.sleep(20)
                        await message.delete()
                else:
                    #–µ—Å–ª–∏ –±–∞–Ω
                    await main.bot.send_message(config.LOG_CHANNEL, f"–ó–∞–±–∞–Ω–Ω–µ–Ω—ã–π {username}({user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} {asset}")
            else:
                #–µ—Å–ª–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫
                await main.bot.send_message(config.LOG_CHANNEL, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–º–µ–Ω–µ–º {name}! –°—Ç–∞–≤–∫–∞{amounta}{asset}")
                masage = await main.bot.send_message(config.MAIN_CHANNEL, f"–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø–æ–∑–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º <b>{name}</b>! \n\n‚ö†Ô∏è–ü—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–º–æ–∂–Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –∏–∑-–∑–∞ –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!", "html")
                await asyncio.sleep(20)
                await masage.delete()



def register_handlers(dp: Dispatcher):
    dp.register_channel_post_handler(getter, ChatTypeFilter(ChatType.CHANNEL), text_contains="–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)")
