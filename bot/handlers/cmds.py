from aiogram import Dispatcher
from aiogram.types import Message
from aiogram.utils.deep_linking import decode_payload
from aiogram import types
import bot.utils.text
from bot import keyboards
from bot.utils import text
from bot.utils.cryptopay import crypto
import main
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from main import dp, db
from bot.utils import text

async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã start"""
    if not main.db.users_exists(message.from_user.id):
        main.db.add_user(message.from_user.id)
    main.db.set_active(message.from_user.id)
    args = message.get_args() #–ø–æ–ª—É—á–∞–µ–º –Ω–µ–∫–∏–µ args —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    if args is not None and args != "": #–ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω–∏ –≤–∞—â–µ
        id = decode_payload(args) #—Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –∞–π–¥–∏
        if int(id) == message.from_user.id: #—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º 
            if main.db.have_check(message.from_user.id):
                check_id = main.db.get_check_id(message.from_user.id)
                check = await crypto.get_checks(check_ids=check_id)
                await message.answer("–ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", reply_markup=keyboards.functional.create_url_button(check.bot_check_url))
                main.db.remove_check(check_id)
            else:
                await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —á–µ–∫–æ–≤')
        else:
            await message.answer("–≠—Ç–æ –Ω–µ –¥–ª—è –≤–∞—Å")
    else:
        murkup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buton = KeyboardButton(text='üé≤–ò–≥—Ä–∞—Ç—å')
        bton = KeyboardButton(text='üë§–ü—Ä–æ—Ñ–∏–ª—å')
        murkup.add(buton)
        murkup.add(bton)
        await message.answer(f'–ü—Ä–∏–≤–µ—Çüëã', reply_markup=murkup)
async def text(message: Message):
    murk = types.InlineKeyboardMarkup()
    murk.add(types.InlineKeyboardButton("‚ô†Ô∏è–°–¥–µ–ª–∞—Ç—å –°—Ç–∞–≤–∫—É", url='https://t.me/+_cMeCYzgF_c4ZmJi'))
    await message.answer('<b>üî•–•–æ—á–µ—à—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É?</b>\n\n<b><u>–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∏–≥—Ä–æ–≤–æ–π –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã—Ö —ç–º–æ—Ü–∏–π!</u></b>',parse_mode='html',reply_markup=murk)

async def text1(message: Message):
    ids = message.from_user.id
    us = message.from_user.first_name
    texts = f'<b>üë§–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n–ò–º—è: <b>{us}</b>\n–í—Å–µ–≥–æ –∏–≥—Ä: <b>{main.db.get_total(ids)}</b>\n–ë–∞–ª–∞–Ω—Å: <b>{round(main.db.get_moneyback(ids), 2)} USDT</b>'
    await message.answer(texts, parse_mode='html')


def register_handlers(dp: Dispatcher):

    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(text, text=['üé≤–ò–≥—Ä–∞—Ç—å'])
    dp.register_message_handler(text1, text=['üë§–ü—Ä–æ—Ñ–∏–ª—å'])










